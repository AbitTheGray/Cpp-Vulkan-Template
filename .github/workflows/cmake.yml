name: CMake Build

on: [push]

jobs:
  linux_ubuntu:
    runs-on: ubuntu-latest

    env:
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk"
      vulkan_version: "1.2.154.0"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install Vulkan SDK
        shell: bash
        run: |
          # Download Vulkan SDK
          curl -LS -o vulkansdk.tar.gz \
            https://sdk.lunarg.com/sdk/download/${{ env.vulkan_version }}/linux/vulkansdk-linux-x86_64-${{ env.vulkan_version }}.tar.gz

          # Create Vulkan SDK directory and extract
          mkdir "${{ env.vulkan_sdk }}"
          tar xfz vulkansdk.tar.gz -C "${{ env.vulkan_sdk }}"

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory.
        # We'll use this as our working directory for all subsequent commands.
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable access regardless of the host operating system.
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source and build directories,
        # but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          # Set environment variables
          export VULKAN_SDK="${{ env.vulkan_sdk }}/${{ env.vulkan_version }}/x86_64"
          export PATH=$VULKAN_SDK/bin:$PATH
          export LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATH
          export VK_LAYER_PATH=$VULKAN_SDK/etc/explicit_layer.d

          cmake "$GITHUB_WORKSPACE" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTING=ON \
            -DCMAKE_C_COMPILER=gcc-10 \
            -DCMAKE_CXX_COMPILER=g++-10

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.
        # You can specify a specific target with "--target <NAME>".
        run: cmake --build . --config Release

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail.
        run: ctest -C Release --verbose

  windows:
    runs-on: windows-latest

    env:
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk"
      vulkan_version: "1.2.154.1"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install Vulkan SDK
        shell: pwsh
        run: |
          curl -LS -o vulkansdk.exe `
            https://vulkan.lunarg.com/sdk/download/${{ env.vulkan_version }}/windows/VulkanSDK-${{ env.vulkan_version }}-Installer.exe?Human=true
          7z x vulkansdk.exe -o"${{runner.workspace}}/vulkan_sdk"

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory.
        # We'll use this as our working directory for all subsequent commands.
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: pwsh
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source and build directories,
        # but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          $env:Path += ";${{runner.workspace}}/vulkan_sdk/;${{runner.workspace}}/vulkan_sdk/Bin/;${{runner.workspace}}/vulkan_sdk/Lib/"
          $env:VULKAN_SDK = "${{runner.workspace}}/vulkan_sdk"

          cmake "${env:GITHUB_WORKSPACE}" `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_TESTING=ON `
            -DCMAKE_C_COMPILER=gcc-10 `
            -DCMAKE_CXX_COMPILER=g++-10 `
            -G "Visual Studio 16 2019" -A x64

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: pwsh
        # Execute the build.
        # You can specify a specific target with "--target <NAME>".
        run: cmake --build . --config Release

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: pwsh
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail.
        run: ctest -C Release
